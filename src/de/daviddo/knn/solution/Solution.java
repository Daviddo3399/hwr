package de.daviddo.knn.solution;import de.daviddo.program.manager.ProgramManager;import de.daviddo.utils.Utils;import javafx.scene.paint.Color;/** * Repräsentiert die Solution Klasse, welche den jeweiligen Lösungsansatz speichert. * Da das Alphabet 26 Stellen hat, gibt es auch 26 Lösungsansätze, welche über den * SolutionManager gemanaget werden. * * Die Klasse bietet die Möglichkeit mit der Methode getCharacter den jeweiligen * Buchstaben, den Index des Buchstabens im Alphabet und die Wahrscheinlichkeit * auszugeben. * * Desweiteren wird jenachdem wie groß die Wahrscheinlichkeit für den jeweiligen * Buchstaben ist, der Lösungsansatz einer bestimmten Farbe zugeteilt, welche * durch die Methode getColor bestimmt und ausgegeben wird. * * @author  Daviddo3399 */public class Solution {    private Integer index;    private Integer mistakes;    private Integer recognized;    private Double  output;    private String  character;    public Solution(int index, Double output) {        this.output     = output;        this.index      = index;        this.character  = Utils.ALPHABET[index];        mistakes        = ProgramManager.getDataFile().getInteger("knn." + character + ".mistakes");        recognized      = ProgramManager.getDataFile().getInteger("knn." + character + ".recognized");    }    /**     * Gibt den speziellen Buchstaben mit Hilfe des indexes aus.     *     * @return der Buchstabe der Lösung     */    public String getCharacter() {        return character;    }    /**     * Gibt den Index für die jeweilige Lösung aus. Der Index repräsentiert     * gleichzeitig auch die Position im Alphabet dar.     *     * @return den Index des Lösungsansatz     */    public Integer getIndex() {        return index;    }    /**     * Sucht die Farbe für den jeweiligen Prozentwert heraus, welche später genutzt     * wird um den Prozentwert farbig anzuzeigen.     *     * @return die Farbe für den jeweiligen Prozentwert     */    public Color getColor() {        Color color = Color.BLACK;        if (getPercentage() >= 70.00) {            color = Color.DARKGREEN;        } else if (getPercentage() < 70.00 && getPercentage() > 40.00) {            color = Color.GOLD;        } else if (getPercentage() < 40.00 && getPercentage() > 10) {            color = Color.ORANGERED;        } else if (getPercentage() <= 10.00) {            color = Color.DARKRED;        }        return color;    }    /**     * Berechnet wie hoch die Wahrscheinlichkeit ist, ob die Lösung auch wirklich     * das richtige Ergebnis, laut dem künstlich neuronalen Netzes ist.     *     * @return Die Wahrscheinlichkeit als Double     */    public Double getPercentage() {        return Utils.round(output * 100, 2);    }    public void increaseMistakes() {        mistakes++;    }    public void increaseRecognized() {        recognized++;    }    public void decreaseRecognized() {        recognized--;    }    public Integer getMistakes() {        return mistakes;    }    public Integer getRecognized() {        return recognized;    }    public Double getMistakeRatio() {        return (double) mistakes / recognized;    }    public Double getOutput() {        return output;    }}